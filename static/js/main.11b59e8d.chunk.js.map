{"version":3,"sources":["components/UserSelector/UserSelector.tsx","utils/axiosClient.ts","components/Loader/Loader.tsx","components/PostList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/Comments/Comments.tsx","components/PostDetails/PostDetails.tsx","components/Main/Main.tsx","api/users.ts","App.tsx","index.tsx"],"names":["UserSelector","users","selectedUser","handleSelectUser","useState","expanded","setExpanded","useEffect","handleDocumentClick","document","addEventListener","removeEventListener","className","classNames","type","onClick","current","name","id","role","map","user","href","instance","axios","create","baseURL","client","url","get","response","data","post","delete","Loader","PostsList","selectedPost","handleSelectPost","posts","setPosts","isLoading","setIsLoading","hasError","setHasError","getPostsFromServer","a","userId","loadPosts","length","title","initialState","email","body","pattern","NewCommentForm","handleAddComment","submitting","setSubmitting","errors","setErrors","setValues","isNameDefined","trim","isEmailDefined","isEmailCorrect","test","isBodyDefined","handleChange","event","target","field","value","handleSubmit","preventDefault","cur","onSubmit","onReset","htmlFor","placeholder","onChange","getPostComments","postId","deleteComment","commentId","Comments","comments","setComments","isVisible","setIsVisible","getCommentsFromServer","loadComments","comment","newComment","addedComment","currentComments","Error","handleDeleteComment","tempComments","prevComments","filter","PostDetails","Main","setUsers","setSelectedUser","setSelectedPost","getUsersFromServer","loadUsers","useCallback","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.11b59e8d.chunk.js","sourcesContent":["import {\n  FunctionComponent,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { IUser } from '../../types/IUser';\n\ninterface UserSelectorProps {\n  users: IUser[];\n  selectedUser: IUser | null;\n  handleSelectUser: (user: IUser | null) => void;\n}\n\nexport const UserSelector: FunctionComponent<UserSelectorProps> = ({\n  users,\n  selectedUser,\n  handleSelectUser,\n}) => {\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [expanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': expanded })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {!selectedUser\n              ? 'Choose a user'\n              : selectedUser.name}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => handleSelectUser(user)}\n              className={classNames('dropdown-item', {\n                'is-active': user === selectedUser,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://mate.academy/students-api',\n});\n\nexport const client = {\n  async get<T>(url: string) {\n    const response = await instance.get<T>(url);\n\n    return response.data;\n  },\n\n  async post<T>(url: string, data: any) {\n    const response = await instance.post<T>(url, data);\n\n    return response.data;\n  },\n\n  async patch<T>(url: string, data: any) {\n    const response = await instance.patch<T>(url, data);\n\n    return response.data;\n  },\n\n  async delete(url: string) {\n    return instance.delete(url);\n  },\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  FunctionComponent,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { IUser } from '../../types/IUser';\nimport { IPost } from '../../types/IPost';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\n\ninterface PostsListProps {\n  selectedUser: IUser;\n  selectedPost: IPost | null;\n  handleSelectPost: (post: IPost | null) => void;\n}\n\nexport const PostsList: FunctionComponent<PostsListProps> = ({\n  selectedUser,\n  selectedPost,\n  handleSelectPost,\n}) => {\n  const [posts, setPosts] = useState<IPost[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    const getPostsFromServer = async () => {\n      setIsLoading(true);\n      handleSelectPost(null);\n\n      try {\n        const loadPosts = await getUserPosts(selectedUser.id);\n\n        setPosts(loadPosts);\n      } catch (err) {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getPostsFromServer();\n  }, [selectedUser]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (hasError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (!posts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': post.id !== selectedPost?.id,\n                    },\n                  )}\n                  onClick={() => {\n                    handleSelectPost(\n                      post.id === selectedPost?.id ? null : post,\n                    );\n                  }}\n                >\n                  {post.id === selectedPost?.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { client } from '../utils/axiosClient';\nimport { IPost } from '../types/IPost';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<IPost[]>(`/posts?userId=${userId}`);\n};\n","import React, {\n  FunctionComponent,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../../types/IComment';\n\ninterface NewCommentFormProps {\n  handleAddComment: (data: CommentData) => Promise<void>;\n}\n\nconst initialState = {\n  name: '',\n  email: '',\n  body: '',\n};\n\n// eslint-disable-next-line max-len\nconst pattern = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\nexport const NewCommentForm: FunctionComponent<NewCommentFormProps> = ({\n  handleAddComment,\n}) => {\n  const [submitting, setSubmitting] = useState(false);\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [{ name, email, body }, setValues] = useState(initialState);\n\n  const clearForm = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const isNameDefined = () => name.trim();\n  const isEmailDefined = () => email.trim();\n  const isEmailCorrect = () => pattern.test(email);\n  const isBodyDefined = () => body.trim();\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name: field, value } = event.target;\n\n    setValues(current => ({ ...current, [field]: value }));\n    setErrors(current => ({ ...current, [field]: false }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !isNameDefined(),\n      email: !isEmailDefined() || !isEmailCorrect(),\n      body: !isBodyDefined(),\n    });\n\n    if (!isNameDefined()\n      || !isEmailDefined()\n      || !isEmailCorrect()\n      || !isBodyDefined()) {\n      return;\n    }\n\n    if (name && email && body) {\n      setSubmitting(true);\n\n      await handleAddComment({ name, email, body });\n\n      setSubmitting(false);\n      setValues(cur => ({ ...cur, body: '' }));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={clearForm} data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {!isNameDefined() ? 'Email is required' : 'Email is invalid'}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { client } from '../utils/axiosClient';\nimport { IComment } from '../types/IComment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<IComment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<IComment, 'id'>) => {\n  return client.post<IComment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import {\n  FunctionComponent,\n  useEffect,\n  useState,\n} from 'react';\nimport { CommentData, IComment } from '../../types/IComment';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport {\n  createComment,\n  deleteComment,\n  getPostComments,\n} from '../../api/comments';\n\ninterface CommentsProps {\n  postId: number;\n}\n\nexport const Comments: FunctionComponent<CommentsProps> = ({ postId }) => {\n  const [comments, setComments] = useState<IComment[]>([]);\n  const [isVisible, setIsVisible] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getCommentsFromServer = async () => {\n      try {\n        const loadComments = await getPostComments(postId);\n\n        setComments(loadComments);\n      } catch (err) {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getCommentsFromServer();\n  }, [postId]);\n\n  const handleAddComment = async (comment: CommentData) => {\n    const newComment = {\n      ...comment,\n      postId,\n    };\n\n    try {\n      const addedComment = await createComment(newComment);\n\n      setComments(currentComments => [...currentComments, addedComment]);\n    } catch (error) {\n      setHasError(true);\n      throw Error('Unable to add comment');\n    }\n  };\n\n  const handleDeleteComment = async (commentId: number) => {\n    const tempComments = [...comments];\n\n    setComments(prevComments => prevComments\n      .filter(comment => comment.id !== commentId));\n\n    try {\n      await deleteComment(commentId);\n    } catch (error) {\n      setHasError(true);\n      setComments(tempComments);\n    }\n  };\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (hasError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"block\">\n      {!comments.length\n        ? (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )\n        : (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n      {!isVisible\n        ? (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsVisible(true)}\n          >\n            Write a comment\n          </button>\n        )\n        : (\n          <NewCommentForm handleAddComment={handleAddComment} />\n        )}\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { Comments } from '../Comments';\nimport { IPost } from '../../types/IPost';\n\ninterface PostDetailsProps {\n  selectedPost: IPost;\n}\n\nexport const PostDetails: FunctionComponent<PostDetailsProps> = ({\n  selectedPost,\n}) => {\n  const { id, title, body } = selectedPost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${id}: ${title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {body}\n        </p>\n      </div>\n\n      <Comments postId={id} />\n    </div>\n  );\n};\n","import {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { UserSelector } from '../UserSelector';\nimport { PostsList } from '../PostList';\n\nimport { PostDetails } from '../PostDetails';\nimport { IUser } from '../../types/IUser';\nimport { IPost } from '../../types/IPost';\nimport { getUsers } from '../../api/users';\n\nexport const Main: FunctionComponent = () => {\n  const [users, setUsers] = useState<IUser[]>([]);\n  const [selectedUser, setSelectedUser] = useState<IUser | null>(null);\n  const [selectedPost, setSelectedPost] = useState<IPost | null>(null);\n\n  useEffect(() => {\n    const getUsersFromServer = async () => {\n      try {\n        const loadUsers = await getUsers();\n\n        return setUsers(loadUsers);\n      } catch (err) {\n        throw Error('Unable to load users');\n      }\n    };\n\n    getUsersFromServer();\n  }, []);\n\n  const handleSelectUser = useCallback((user: IUser | null) => {\n    setSelectedUser(user);\n  }, []);\n\n  const handleSelectPost = useCallback((post: IPost | null) => {\n    setSelectedPost(post);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"tile is-ancestor\">\n        <div className=\"tile is-parent\">\n          <div className=\"tile is-child box is-success\">\n            <div className=\"block\">\n              <UserSelector\n                users={users}\n                selectedUser={selectedUser}\n                handleSelectUser={handleSelectUser}\n              />\n            </div>\n\n            <div className=\"block\" data-cy=\"MainContent\">\n              {!selectedUser ? (\n                <p data-cy=\"NoSelectedUser\">\n                  No user selected\n                </p>\n              ) : (\n                <PostsList\n                  selectedUser={selectedUser}\n                  selectedPost={selectedPost}\n                  handleSelectPost={handleSelectPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div\n          data-cy=\"Sidebar\"\n          className={classNames(\n            'tile',\n            'is-parent',\n            'is-8-desktop',\n            'Sidebar',\n            {\n              'Sidebar--open': selectedPost,\n            },\n          )}\n        >\n          <div className=\"tile is-child box is-success \">\n            {selectedPost && (\n              <PostDetails selectedPost={selectedPost} />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { client } from '../utils/axiosClient';\nimport { IUser } from '../types/IUser';\n\nexport const getUsers = () => {\n  return client.get<IUser[]>('/users');\n};\n","import { FunctionComponent } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { Main } from './components/Main';\n\nexport const App: FunctionComponent = () => {\n  return (\n    <main className=\"section\">\n      <Main />\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}