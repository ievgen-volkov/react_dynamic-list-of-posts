{"version":3,"sources":["app/hooks.ts","features/authorSlice.ts","components/UserSelector/UserSelector.tsx","components/Loader/Loader.tsx","features/selectedPostSlice.ts","components/PostList/PostsList.tsx","utils/axiosClient.ts","app/thunks.ts","api/posts.ts","api/users.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","features/commentsSlice.ts","components/Comments/Comments.tsx","components/PostDetails/PostDetails.tsx","features/postsSlice.ts","components/Main/Main.tsx","App.tsx","features/usersSlice.ts","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","authorSlice","createSlice","name","initialState","author","reducers","setAuthor","state","action","payload","actions","UserSelector","dispatch","users","selectedUser","useState","expanded","setExpanded","useEffect","handleDocumentClick","document","addEventListener","removeEventListener","className","classNames","type","onClick","current","id","role","map","user","href","Loader","selectedPostSlice","post","openPost","closePost","PostsList","selectedPostId","posts","items","title","instance","axios","create","baseURL","client","url","get","response","data","fetchUserPosts","createAsyncThunk","postId","fetchUsers","fetchPostComments","getPostComments","fetchNewComment","comment","email","body","pattern","NewCommentForm","submitting","setSubmitting","errors","setErrors","setValues","isNameDefined","trim","isEmailDefined","isEmailCorrect","test","isBodyDefined","handleChange","event","target","field","value","handleSubmit","preventDefault","cur","onSubmit","onReset","htmlFor","placeholder","onChange","commentsSlice","loaded","hasError","removeComment","filter","extraReducers","builder","addCase","pending","fulfilled","rejected","push","Comments","comments","PostDetails","visible","setVisible","length","postSlice","removePosts","Main","selectedPost","App","usersSlice","store","configureStore","reducer","authorReducer","commentsReducer","usersReducer","postsReducer","selectedPostReducer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8518ed2f.chunk.js","sourcesContent":["import {\n  TypedUseSelectorHook,\n  useDispatch,\n  useSelector,\n} from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IUser } from '../types/IUser';\n\nexport interface AuthorSlice {\n  author: IUser | null;\n}\n\nconst initialState: AuthorSlice = {\n  author: null,\n};\n\n/* eslint-disable no-param-reassign */\n// Reason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst authorSlice = createSlice({\n  name: 'author',\n  initialState,\n  reducers: {\n    setAuthor: (\n      state, action: PayloadAction<IUser>,\n    ) => {\n      state.author = action.payload;\n    },\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport const { setAuthor } = authorSlice.actions;\nexport default authorSlice.reducer;\n","import {\n  FunctionComponent,\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { setAuthor } from '../../features/authorSlice';\n\nexport const UserSelector: FunctionComponent = () => {\n  const dispatch = useAppDispatch();\n  const users = useAppSelector(state => state.users.users);\n  const selectedUser = useAppSelector(state => state.author.author);\n\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [expanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': expanded })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => dispatch(setAuthor(user))}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IPost } from '../types/IPost';\n\nexport interface SelectedPostSlice {\n  post: IPost | null;\n}\n\nconst initialState: SelectedPostSlice = {\n  post: null,\n};\n\n/* eslint-disable no-param-reassign */\n// Reason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst selectedPostSlice = createSlice({\n  name: 'selectedPost',\n  initialState,\n  reducers: {\n    openPost: (state, action: PayloadAction<IPost>) => {\n      state.post = action.payload;\n    },\n    closePost: (state) => {\n      state.post = null;\n    },\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport const { openPost, closePost } = selectedPostSlice.actions;\nexport default selectedPostSlice.reducer;\n","import { FunctionComponent } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { closePost, openPost } from '../../features/selectedPostSlice';\n\ntype Props = {\n  selectedPostId: number | undefined,\n};\n\nexport const PostsList: FunctionComponent<Props> = ({ selectedPostId }) => {\n  const dispatch = useAppDispatch();\n  const posts = useAppSelector(state => state.posts.items);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">{post.title}</td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': post.id !== selectedPostId,\n                    },\n                  )}\n                  onClick={() => dispatch(post.id === selectedPostId\n                    ? closePost()\n                    : openPost(post))}\n                >\n                  {post.id === selectedPostId ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://mate.academy/students-api',\n});\n\nexport const client = {\n  async get<T>(url: string) {\n    const response = await instance.get<T>(url);\n\n    return response.data;\n  },\n\n  async post<T>(url: string, data: any) {\n    const response = await instance.post<T>(url, data);\n\n    return response.data;\n  },\n\n  async patch<T>(url: string, data: any) {\n    const response = await instance.patch<T>(url, data);\n\n    return response.data;\n  },\n\n  async delete(url: string) {\n    return instance.delete(url);\n  },\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getUserPosts } from '../api/posts';\nimport { getUsers } from '../api/users';\nimport { createComment, getPostComments } from '../api/comments';\nimport { IComment } from '../types/IComment';\n\nexport const fetchUserPosts = createAsyncThunk(\n  'posts/fetchUserPosts',\n  (postId: number) => getUserPosts(postId),\n);\n\nexport const fetchUsers = createAsyncThunk(\n  'users/fetchUsers',\n  () => getUsers(),\n);\n\nexport const fetchPostComments = createAsyncThunk(\n  'comments/fetchPostComments',\n  (postId: number) => getPostComments(postId),\n);\n\nexport const fetchNewComment = createAsyncThunk(\n  'comments/fetchNewComment',\n  (comment: Omit<IComment, 'id'>) => createComment(comment),\n);\n","import { client } from '../utils/axiosClient';\nimport { IPost } from '../types/IPost';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<IPost[]>(`/posts?userId=${userId}`);\n};\n","import { client } from '../utils/axiosClient';\nimport { IUser } from '../types/IUser';\n\nexport const getUsers = () => {\n  return client.get<IUser[]>('/users');\n};\n","import { client } from '../utils/axiosClient';\nimport { IComment } from '../types/IComment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<IComment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<IComment, 'id'>) => {\n  return client.post<IComment>('/comments', data);\n};\n","import React, {\n  FunctionComponent,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../../types/IComment';\nimport { useAppDispatch } from '../../app/hooks';\nimport { fetchNewComment } from '../../app/thunks';\n\ntype Props = {\n  postId: number;\n};\n\nconst initialState: CommentData = {\n  name: '',\n  email: '',\n  body: '',\n};\n\n// eslint-disable-next-line max-len\nconst pattern = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n\nexport const NewCommentForm: FunctionComponent<Props> = ({ postId }) => {\n  const dispatch = useAppDispatch();\n  const [submitting, setSubmitting] = useState(false);\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [{ name, email, body }, setValues] = useState(initialState);\n\n  const clearForm = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const isNameDefined = () => name.trim();\n  const isEmailDefined = () => email.trim();\n  const isEmailCorrect = () => pattern.test(email);\n  const isBodyDefined = () => body.trim();\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name: field, value } = event.target;\n\n    setValues(current => ({ ...current, [field]: value }));\n    setErrors(current => ({ ...current, [field]: false }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !isNameDefined(),\n      email: !isEmailDefined() || !isEmailCorrect(),\n      body: !isBodyDefined(),\n    });\n\n    if (!isNameDefined()\n      || !isEmailDefined()\n      || !isEmailCorrect()\n      || !isBodyDefined()) {\n      return;\n    }\n\n    if (name && email && body && postId) {\n      setSubmitting(true);\n      dispatch(fetchNewComment({\n        name, email, body, postId,\n      }));\n      setSubmitting(false);\n      setValues(cur => ({ ...cur, body: '' }));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={clearForm} data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {!isNameDefined() ? 'Email is required' : 'Email is invalid'}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IComment } from '../types/IComment';\nimport { fetchNewComment, fetchPostComments } from '../app/thunks';\n\nexport interface CommentsSlice {\n  items: IComment[];\n  loaded: boolean;\n  hasError: boolean;\n}\n\nconst initialState: CommentsSlice = {\n  items: [],\n  loaded: false,\n  hasError: false,\n};\n\n/* eslint-disable no-param-reassign */\n// Reason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    removeComment: (\n      state, action: PayloadAction<number>,\n    ) => {\n      state.items = state.items.filter(({ id }) => (\n        id !== action.payload\n      ));\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPostComments.pending, (state) => {\n        state.loaded = false;\n      })\n      .addCase(fetchPostComments.fulfilled, (\n        state, action: PayloadAction<IComment[]>,\n      ) => {\n        state.loaded = true;\n        state.items = action.payload;\n      })\n      .addCase(fetchPostComments.rejected, (state) => {\n        state.loaded = true;\n        state.hasError = true;\n      });\n    builder\n      .addCase(fetchNewComment.fulfilled, (state, action) => {\n        state.items.push(action.payload);\n      })\n      .addCase(fetchNewComment.rejected, (state) => {\n        state.hasError = true;\n      });\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport const { removeComment } = commentsSlice.actions;\nexport default commentsSlice.reducer;\n","import { FunctionComponent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { removeComment } from '../../features/commentsSlice';\n\nexport const Comments: FunctionComponent = () => {\n  const dispatch = useAppDispatch();\n  const comments = useAppSelector(state => state.comments.items);\n\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => (\n        <article\n          className=\"message is-small\"\n          key={comment.id}\n          data-cy=\"Comment\"\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(removeComment(comment.id))}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  );\n};\n","import {\n  FunctionComponent,\n  useEffect,\n  useState,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comments } from '../Comments';\nimport { IPost } from '../../types/IPost';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { fetchPostComments } from '../../app/thunks';\n\ntype Props = {\n  post: IPost;\n};\n\nexport const PostDetails: FunctionComponent<Props> = ({ post }) => {\n  const dispatch = useAppDispatch();\n  const {\n    items: comments,\n    loaded,\n    hasError,\n  } = useAppSelector(state => state.comments);\n\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchPostComments(post.id));\n  }, [post.id, dispatch]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${post.id}: ${post.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {post.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {!loaded ? (\n          <Loader />\n        ) : (hasError && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        ))}\n\n        {loaded && !hasError && !comments.length && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n\n        {loaded && !hasError && comments.length > 0 && (\n          <Comments />\n        )}\n\n        {loaded && !hasError && !visible && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {loaded && !hasError && visible && (\n          <NewCommentForm postId={post.id} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IPost } from '../types/IPost';\nimport { fetchUserPosts } from '../app/thunks';\n\nexport interface PostsSlice {\n  items: IPost[];\n  loaded: boolean;\n  hasError: boolean;\n}\n\nconst initialState: PostsSlice = {\n  items: [],\n  loaded: false,\n  hasError: false,\n};\n\n/* eslint-disable no-param-reassign */\n// Reason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst postSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    removePosts: (state) => {\n      state.items = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUserPosts.pending, (state) => {\n        state.loaded = false;\n      })\n      .addCase(fetchUserPosts.fulfilled, (\n        state, action: PayloadAction<IPost[]>,\n      ) => {\n        state.loaded = true;\n        state.items = action.payload;\n      })\n      .addCase(fetchUserPosts.rejected, (state) => {\n        state.loaded = true;\n        state.hasError = true;\n      });\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport const { removePosts } = postSlice.actions;\nexport default postSlice.reducer;\n","import {\n  FunctionComponent,\n  useEffect,\n} from 'react';\nimport classNames from 'classnames';\nimport { UserSelector } from '../UserSelector';\nimport { Loader } from '../Loader';\nimport { PostsList } from '../PostList';\n\nimport { PostDetails } from '../PostDetails';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { fetchUserPosts, fetchUsers } from '../../app/thunks';\nimport { closePost } from '../../features/selectedPostSlice';\nimport { removePosts } from '../../features/postsSlice';\n\nexport const Main: FunctionComponent = () => {\n  const dispatch = useAppDispatch();\n  const author = useAppSelector(state => state.author.author);\n  const {\n    items: posts,\n    loaded,\n    hasError,\n  } = useAppSelector(state => state.posts);\n  const { post: selectedPost } = useAppSelector(state => state.selectedPost);\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n    dispatch(closePost());\n\n    dispatch(author\n      ? fetchUserPosts(author.id)\n      : removePosts());\n  }, [author?.id, dispatch]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"tile is-ancestor\">\n        <div className=\"tile is-parent\">\n          <div className=\"tile is-child box is-success\">\n            <div className=\"block\">\n              <UserSelector />\n            </div>\n\n            <div className=\"block\" data-cy=\"MainContent\">\n              {!author && (\n                <p data-cy=\"NoSelectedUser\">\n                  No user selected\n                </p>\n              )}\n\n              {author && !loaded && (\n                <Loader />\n              )}\n\n              {author && loaded && hasError && (\n                <div\n                  className=\"notification is-danger\"\n                  data-cy=\"PostsLoadingError\"\n                >\n                  Something went wrong!\n                </div>\n              )}\n\n              {author && loaded && !hasError && !posts.length && (\n                <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                  No posts yet\n                </div>\n              )}\n\n              {author && loaded && !hasError && posts.length > 0 && (\n                <PostsList\n                  selectedPostId={selectedPost?.id}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div\n          data-cy=\"Sidebar\"\n          className={classNames(\n            'tile',\n            'is-parent',\n            'is-8-desktop',\n            'Sidebar',\n            {\n              'Sidebar--open': selectedPost,\n            },\n          )}\n        >\n          <div className=\"tile is-child box is-success \">\n            {selectedPost && (\n              <PostDetails post={selectedPost} />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { Main } from './components/Main';\n\nexport const App: FunctionComponent = () => {\n  return (\n    <main className=\"section\">\n      <Main />\n    </main>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IUser } from '../types/IUser';\nimport { fetchUsers } from '../app/thunks';\n\nexport interface UsersSlice {\n  users: IUser[];\n  loaded: boolean;\n  hasError: boolean;\n}\n\nconst initialState: UsersSlice = {\n  users: [],\n  loaded: false,\n  hasError: false,\n};\n\n/* eslint-disable no-param-reassign */\n// Reason of this disabled rule is that Redux toolkit uses \"Immer Library\"\n// for state management. It allows mutating the state inside reducers.\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUsers.pending, (state) => {\n        state.loaded = false;\n      })\n      .addCase(fetchUsers.fulfilled, (\n        state, action: PayloadAction<IUser[]>,\n      ) => {\n        state.loaded = true;\n        state.users = action.payload;\n      })\n      .addCase(fetchUsers.rejected, (state) => {\n        state.loaded = true;\n        state.hasError = true;\n      });\n  },\n});\n/* eslint-enable no-param-reassign */\n\nexport default usersSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authorReducer from '../features/authorSlice';\nimport commentsReducer from '../features/commentsSlice';\nimport usersReducer from '../features/usersSlice';\nimport postsReducer from '../features/postsSlice';\nimport selectedPostReducer from '../features/selectedPostSlice';\n\nexport const store = configureStore({\n  reducer: {\n    author: authorReducer,\n    comments: commentsReducer,\n    users: usersReducer,\n    posts: postsReducer,\n    selectedPost: selectedPostReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}